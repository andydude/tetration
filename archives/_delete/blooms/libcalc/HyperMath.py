#
#  File: HyperMath.py
#  Author: Andrew Robbins
#  Description:
#       This package contains math functions for tetration and 
#       its related operations, like super-root and super-log.
#       Tetration is iterated exponentiation, so for integer 
#       values: 2^^3 for example, is 2^2^2. For non-integer
#       values, a smooth extension to real numbers has been
#       used. For more information on this extension, goto:
#
#       <http://tetration.itgo.com>
#       or
#       <http://bloomsxml.net/_blooms/tetra/>
#

import math

# used by srt() for iterations
# used by slog() for rounding
global hypermath_approx_size
hypermath_approx_size = 8

#########################
# convinience functions #
#########################

def root(n, x):     return x**(1/n)             # root
def logb(b, x):     return math.log(x, b)       # logarithm
def twr(b, x):      return tet(x, b)            # power tower
def sln(x):         return slog(math.e, x)      # natural super-log
def sqsrt(x):       return srt(2, x)            # square super-root
def texp(x):        return tet(math.e, x)       # natural tetration

####################################
# hyper-arithmetic functions, this #
# is where the fun stuff happens!  #
####################################

# the tetration function
def tet(x, y):
    """Tetration: The number z = x^^y."""
    hyperexp = int(math.ceil(y))
    if x == 0:
      ret = (1 + hyperexp)%2
    elif abs(y - int(y)) < 0.0001:
      ret = tet_integer(x, y, 1)
    else:
      ret = tet_integer(x, hyperexp, tet_critical(x, y - hyperexp))
    if isinstance(x, int) and isinstance(y, int):
        return int(round(ret))
    else:
        return ret
        
# this "standardizes" y to [-1..0]
def tet_integer(x, hyperexp, leftover):
    if hyperexp <= -2:
        ret = tet_integer(x, hyperexp + 1, logb(x, leftover))
    elif hyperexp == -1:
        if (abs(leftover - 1) < 10**(-hypermath_approx_size)):
            ret = 0
        else:
            ret = logb(x, leftover)
    elif hyperexp == 0:
        ret = leftover
    elif hyperexp > 0:
        ls = map(lambda q: x, range(hyperexp))
        ls.append(leftover)
        ls.reverse()
        try:
            ret = reduce(lambda a, b: b**a, ls)
        except:
            raise OverflowError
    else:
        print "tet_integer error!"
    return ret

def tet_deriv(x, y):
    if y < -1:
        return tet_deriv(x, y+1) / (tet(x, y+1) * math.log(x))
    elif (-1 <= y and y <= 0):
        # this is just an approximation of the real derivative,
        # which is complicated, and isn't necessary, because
        # the derivative functions are only used by srt() to
        # find the inverse by Newton's method.
        return 1 
    elif y > 0:
        return tet_deriv(x, y-1) * tet(x, y) * math.log(x)
    else:
        raise OverflowError

# the super-logarithm function
def slog(x, z):
    """Super-log: The number y such that x^^y = z."""
    [hyperexp, leftover] = slog_integer(x, z)
    ret = slog_critical(x, leftover) + hyperexp
    if (abs(ret - round(ret)) < 10**(-hypermath_approx_size)):
        return int(round(ret))
    else:
        return ret

# this "standardizes" z to [0..1]
def slog_integer(x, z):
    if z < 0:
        return [-1, x**z]
    elif z == 0:
        return [0, 0]
    elif (0 < z and z < 1):
        return [0, z]
    elif z == 1:
        return [1, 0]
    elif z > 1:
        hyperexp = 0
        leftover = z
        while leftover > 1:
            leftover = logb(x, leftover)
            hyperexp += 1
        return [hyperexp, leftover]
    else:
        raise OverflowError

def slog_deriv(x, z):
    return 1 / (tet_deriv(x, slog(x, z)))


# the super-root function
def srt(y, z):
    """Super-root: The number x such that z = x^^y."""
    return srt_approx(y, z, hypermath_approx_size)

def srt_approx(y, z, n):
    # horrible first guess, because srt_critical()
    # is only valid when y and z are "standardized"
    # which neither are, so this is just to start
    approx1 = 1 # a good impossible x to start off
    approx2 = srt_step(y, z, 1.5) # horrible guess

    # now apply Newton's iterative method in srt_step:
    while (abs(approx1 - approx2) > 10**(-n)):
        approx1 = approx2
        approx2 = srt_step(y, z, approx1)
    return approx2

# finds the root of f(x) := tet(x, y) - z == 0 
def srt_step(y, z, xn):
    return xn - ((tet(xn, y) - z)/tet_deriv(xn, y))

# personal notes:
# slog  x,z -> y [0..1]
# tet   x,y -> z [-1..0]
# srt   y,z -> x
# Block[{i = -1}, s[NestWhile[Log[x,arg]&,z,(i++;arg>1)&]]+i]], d]]
# either:
#   solve: tet(x, y) == z for x
#   solve: slog(x, z) == y for x
# DOESN'T WORK:
# finds the root of f(x) := slog(x, z) - y == 0 
# def srt_by_slog_step(y, z, xn):
#     return xn - ((slog(xn, z) - y)/slog_deriv(xn, z))

####################################################################
# the following functions are hard-coded 5-th approx. power series #
# if you want to increase accuracy, this is where to do it,        #
# but if you don't know what you're doing, don't change these!     #
####################################################################

def slog_critical(x, z):
    t = math.log(x)
    return -1 - \
        (360*z**2/2*(-5*t**2 + 4*t**3 - 15*t**5 - 22*t**6 + \
        20*t**7 - 10*t**9 + 4*t**10))/ \
        (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + \
        3672*t**5 + 3690*t**6 + 2785*t**7 + 1416*t**8 + \
        462*t**9 + 72*t**10) + \
        (60*z*(6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 + \
        66*t**7 + 47*t**8 + 6*t**10))/ \
        (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + \
        3672*t**5 + 3690*t**6 + 2785*t**7 + 1416*t**8 + \
        462*t**9 + 72*t**10) + \
        (1440*z**5/120*(6 - 6*t - 12*t**2 - 21*t**3 - 40*t**4 + \
        81*t**5 + 90*t**6 + 30*t**7 - 57*t**8 - 24*t**9 + \
        6*t**10))/(72 + 288*t + 756*t**2 + 1608*t**3 + \
        2835*t**4 + 3672*t**5 + 3690*t**6 + 2785*t**7 + \
        1416*t**8 + 462*t**9 + 72*t**10) - \
        (360*z**4/24*(-125*t**4 + 124*t**5 + 210*t**6 + 129*t**7 - \
        184*t**8 - 90*t**9 + 24*t**10))/ \
        (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + \
        3672*t**5 + 3690*t**6 + 2785*t**7 + 1416*t**8 + \
        462*t**9 + 72*t**10) + \
        (120*z**3/6*(75*t**3 - 72*t**4 - 90*t**5 + 36*t**6 + \
        200*t**7 - 174*t**8 - 120*t**9 + 36*t**10))/ \
        (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + \
        3672*t**5 + 3690*t**6 + 2785*t**7 + 1416*t**8 + \
        462*t**9 + 72*t**10)

def tet_critical(x, y):
    w = y + 1
    t = math.log(x)
    return ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)*w)/ \
        (60*(6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 + 66*t**7 + 47*t**8 + 6*t**10)) +  \
        ((-5*t + 4*t**2 - 15*t**4 - 22*t**5 + 20*t**6 - 10*t**8 + 4*t**9)* \
        (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**2*w**2)/ \
        (1200*(6 + 18*t**2 + 48*t**3 + 61*t**4 + 18*t**5 + 66*t**6 + 47*t**7 + 6*t**9)* \
        (6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 + 66*t**7 + 47*t**8 + 6*t**10)**2) +  \
        ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**3*(900*t**2 - 1728*t**3 +  \
        54*t**4 + 5580*t**5 + 4701*t**6 - 12546*t**7 + 18018*t**8 + 35007*t**9 -  \
        5756*t**10 - 32262*t**11 + 32064*t**12 + 19868*t**13 - 15870*t**14 +  \
        10704*t**15 + 4752*t**16 - 3600*t**17 + 648*t**18)*w**3)/ \
        (648000*(6 + 18*t**2 + 48*t**3 + 61*t**4 + 18*t**5 + 66*t**6 + 47*t**7 + 6*t**9)**2* \
        (6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 + 66*t**7 + 47*t**8 + 6*t**10)**3) +  \
        ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**4*(-27000*t**3 + 87264*t**4 -  \
        33480*t**5 - 291312*t**6 - 4140*t**7 + 921528*t**8 - 1668960*t**9 -  \
        2116812*t**10 + 2714163*t**11 + 1987836*t**12 - 9962358*t**13 -  \
        1858549*t**14 + 12192656*t**15 - 1025414*t**16 - 14977199*t**17 +  \
        1832556*t**18 + 4274458*t**19 - 8040039*t**20 + 194884*t**21 + 2231146*t**22 -  \
        2082576*t**23 + 159612*t**24 + 459072*t**25 - 161640*t**26 + 18144*t**27)* \
        w**4)/(51840000*(6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 + 66*t**7 +  \
        47*t**8 + 6*t**10)**4*(216 + 1944*t**2 + 5184*t**3 + 12420*t**4 + 33048*t**5 +  \
        93960*t**6 + 168804*t**7 + 324558*t**8 + 628992*t**9 + 1012014*t**10 +  \
        1316520*t**11 + 1814581*t**12 + 2300562*t**13 + 2365236*t**14 +  \
        2266485*t**15 + 2310822*t**16 + 1875186*t**17 + 1211439*t**18 + 965466*t**19 +  \
        585306*t**20 + 217871*t**21 + 118260*t**22 + 41706*t**23 + 7128*t**24 +  \
        5076*t**25 + 216*t**27)) +  \
        ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**5*(-7776 + 7776*t - 54432*t**2 -  \
        89424*t**3 - 68688*t**4 + 4833108*t**5 - 23234688*t**6 + 23307588*t**7 +  \
        85749192*t**8 - 58970862*t**9 - 258583428*t**10 + 811049760*t**11 +  \
        503356482*t**12 - 1814558103*t**13 - 36359532*t**14 + 5689370142*t**15 -  \
        3319756896*t**16 - 10840765872*t**17 + 7261125372*t**18 + 13665568500*t**19 -  \
        21163161648*t**20 - 15867623198*t**21 + 29339831112*t**22 +  \
        15856891740*t**23 - 18531353714*t**24 + 7060105143*t**25 +  \
        18708052692*t**26 - 8445290114*t**27 + 267109368*t**28 + 8696497584*t**29 -  \
        3199329252*t**30 - 607786164*t**31 + 1920585384*t**32 - 743251032*t**33 -  \
        178431984*t**34 + 173289456*t**35 - 38654496*t**36 + 3102624*t**37)* \
        w**5)/(23328000000*(6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 +  \
        66*t**7 + 47*t**8 + 6*t**10)**5*(1296*t + 15552*t**3 + 41472*t**4 +  \
        122688*t**5 + 388800*t**6 + 1168992*t**7 + 2565216*t**8 + 6204168*t**9 +  \
        13996800*t**10 + 27406512*t**11 + 49564656*t**12 + 89917584*t**13 +  \
        145919664*t**14 + 212654448*t**15 + 297964344*t**16 + 398621329*t**17 +  \
        474978240*t**18 + 528756960*t**19 + 574489916*t**20 + 569214648*t**21 +  \
        504457416*t**22 + 438080982*t**23 + 359528256*t**24 + 247398936*t**25 +  \
        164806604*t**26 + 108523944*t**27 + 54265056*t**28 + 25267057*t**29 +  \
        12264480*t**30 + 3839592*t**31 + 1392768*t**32 + 492696*t**33 + 57024*t**34 +  \
        40608*t**35 + 1296*t**37)) + \
        w*(1 - (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)/ \
        (60*(6*t + 18*t**3 + 48*t**4 + 61*t**5 + 18*t**6 + 66*t**7 + 47*t**8 + 6*t**10)) -  \
        ((-5 + 4*t - 15*t**3 - 22*t**4 + 20*t**5 - 10*t**7 + 4*t**8)* \
        (72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**2)/ \
        (1200*t*(6 + 18*t**2 + 48*t**3 + 61*t**4 + 18*t**5 + 66*t**6 + 47*t**7 + 6*t**9)** \
        3) - ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**3*(900 - 1728*t + 54*t**2 +  \
        5580*t**3 + 4701*t**4 - 12546*t**5 + 18018*t**6 + 35007*t**7 - 5756*t**8 -  \
        32262*t**9 + 32064*t**10 + 19868*t**11 - 15870*t**12 + 10704*t**13 +  \
        4752*t**14 - 3600*t**15 + 648*t**16))/ \
        (648000*t*(6 + 18*t**2 + 48*t**3 + 61*t**4 + 18*t**5 + 66*t**6 + 47*t**7 + 6*t**9)** \
        5) - ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 + 3690*t**6 +  \
        2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**4* \
        (-27000 + 87264*t - 33480*t**2 - 291312*t**3 - 4140*t**4 + 921528*t**5 -  \
        1668960*t**6 - 2116812*t**7 + 2714163*t**8 + 1987836*t**9 - 9962358*t**10 -  \
        1858549*t**11 + 12192656*t**12 - 1025414*t**13 - 14977199*t**14 +  \
        1832556*t**15 + 4274458*t**16 - 8040039*t**17 + 194884*t**18 + 2231146*t**19 -  \
        2082576*t**20 + 159612*t**21 + 459072*t**22 - 161640*t**23 + 18144*t**24))/ \
        (51840000*t*(6 + 18*t**2 + 48*t**3 + 61*t**4 + 18*t**5 + 66*t**6 + 47*t**7 +  \
        6*t**9)**7) - ((72 + 288*t + 756*t**2 + 1608*t**3 + 2835*t**4 + 3672*t**5 +  \
        3690*t**6 + 2785*t**7 + 1416*t**8 + 462*t**9 + 72*t**10)**5* \
        (-7776 + 7776*t - 54432*t**2 - 89424*t**3 - 68688*t**4 + 4833108*t**5 -  \
        23234688*t**6 + 23307588*t**7 + 85749192*t**8 - 58970862*t**9 -  \
        258583428*t**10 + 811049760*t**11 + 503356482*t**12 - 1814558103*t**13 -  \
        36359532*t**14 + 5689370142*t**15 - 3319756896*t**16 - 10840765872*t**17 +  \
        7261125372*t**18 + 13665568500*t**19 - 21163161648*t**20 -  \
        15867623198*t**21 + 29339831112*t**22 + 15856891740*t**23 -  \
        18531353714*t**24 + 7060105143*t**25 + 18708052692*t**26 - 8445290114*t**27 +  \
        267109368*t**28 + 8696497584*t**29 - 3199329252*t**30 - 607786164*t**31 +  \
        1920585384*t**32 - 743251032*t**33 - 178431984*t**34 + 173289456*t**35 -  \
        38654496*t**36 + 3102624*t**37))/(23328000000*t**6* \
        (6 + 18*t**2 + 48*t**3 + 61*t**4 + 18*t**5 + 66*t**6 + 47*t**7 + 6*t**9)**9))

# not even used anymore
def srt_critical(y, z):
    w = y + 1
    return math.exp (
        (w - z**5)/(5*z - 5*z**5) + ((8 + 3*z + 3*z**2 + 3*z**3)*(w - z**5)**2)/ \
        (2*(1 + z + z**2 + z**3)*(5*z - 5*z**5)**2) +  \
        ((w - z**5)**3*(141 + 114*z + 137*z**2 + 160*z**3 + 94*z**4 + 46*z**5 +  \
        23*z**6))/(6*(1 + z + z**2 + z**3)**2*(5*z - 5*z**5)**3) +  \
        ((w - z**5)**4*(3752 + 4644*z + 6572*z**2 + 8786*z**3 + 8271*z**4 +  \
        6201*z**5 + 4559*z**6 + 2345*z**7 + 983*z**8 + 286*z**9))/ \
        (24*(1 + z + z**2 + z**3)**3*(5*z - 5*z**5)**4) +  \
        ((w - z**5)**5*(26413 + 43788*z + 71327*z**2 + 107016*z**3 + 127964*z**4 +  \
        123511*z**5 + 112966*z**6 + 86121*z**7 + 55719*z**8 + 30783*z**9 +  \
        13789*z**10 + 4945*z**11 + 1111*z**12))/(24*(1 + z + z**2 + z**3)**4* \
        (5*z - 5*z**5)**5) + ((w - z**5)**6*(1147584 + 2372268*z + 4364748*z**2 +  \
        7239240*z**3 + 10133052*z**4 + 11672320*z**5 + 12496131*z**6 + 11758712*z**7 +  \
        9692930*z**8 + 7083811*z**9 + 4586593*z**10 + 2565799*z**11 + 1207310*z**12 +  \
        461852*z**13 + 142779*z**14 + 26500*z**15))/(144*(1 + z + z**2 + z**3)**5* \
        (5*z - 5*z**5)**6) + ((w - z**5)**7*(8420754 + 20753988*z + 42481795*z**2 +  \
        76990278*z**3 + 121292697*z**4 + 160000224*z**5 + 194063316*z**6 +  \
        211487040*z**7 + 205965951*z**8 + 180750890*z**9 + 144124803*z**10 +  \
        102896496*z**11 + 65327579*z**12 + 36725112*z**13 + 18127835*z**14 +  \
        7530398*z**15 + 2537856*z**16 + 673998*z**17 + 106463*z**18))/ \
        (144*(1 + z + z**2 + z**3)**6*(5*z - 5*z**5)**7) +  \
        ((w - z**5)**8*(496180352 + 1413260640*z + 3178321856*z**2 +  \
        6235760464*z**3 + 10812318960*z**4 + 15922203112*z**5 + 21432655820*z**6 +  \
        26200676421*z**7 + 28988389764*z**8 + 29182529190*z**9 + 26993671557*z**10 +  \
        22774217630*z**11 + 17481268291*z**12 + 12211609944*z**13 +  \
        7736232195*z**14 + 4383300212*z**15 + 2201824515*z**16 + 970839406*z**17 +  \
        363027289*z**18 + 109953990*z**19 + 25567460*z**20 + 3466425*z**21))/ \
        (1152*(5*z - 5*z**5)**8*(1 + 7*z + 28*z**2 + 84*z**3 + 203*z**4 + 413*z**5 +  \
        728*z**6 + 1128*z**7 + 1554*z**8 + 1918*z**9 + 2128*z**10 + 2128*z**11 +  \
        1918*z**12 + 1554*z**13 + 1128*z**14 + 728*z**15 + 413*z**16 + 203*z**17 +  \
        84*z**18 + 28*z**19 + 7*z**20 + z**21)) +  \
        ((w - z**5)**9*(32781975696 + 105399987696*z + 257661638388*z**2 +  \
        543036462192*z**3 + 1021727215269*z**4 + 1651503902094*z**5 +  \
        2432783429424*z**6 + 3273600058152*z**7 + 4020137569028*z**8 +  \
        4521756655171*z**9 + 4702485801784*z**10 + 4508334792479*z**11 +  \
        3981292600492*z**12 + 3243068087078*z**13 + 2434873742361*z**14 +  \
        1675078777704*z**15 + 1052421482474*z**16 + 601404391572*z**17 +  \
        309225682518*z**18 + 141174409946*z**19 + 56455458058*z**20 +  \
        19190561663*z**21 + 5293290799*z**22 + 1099084801*z**23 + 130331132*z**24))/ \
        (10368*(5*z - 5*z**5)**9*(1 + 8*z + 36*z**2 + 120*z**3 + 322*z**4 + 728*z**5 +  \
        1428*z**6 + 2472*z**7 + 3823*z**8 + 5328*z**9 + 6728*z**10 + 7728*z**11 +  \
        8092*z**12 + 7728*z**13 + 6728*z**14 + 5328*z**15 + 3823*z**16 + 2472*z**17 +  \
        1428*z**18 + 728*z**19 + 322*z**20 + 120*z**21 + 36*z**22 + 8*z**23 + z**24)) +  \
        ((w - z**5)**10*(476693166384 + 1697276308734*z + 4467155317902*z**2 +  \
        10045305899586*z**3 + 20313693762600*z**4 + 35624832766200*z**5 +  \
        56866797937072*z**6 + 83214466859736*z**7 + 111761268657052*z**8 +  \
        138128433143022*z**9 + 158468146213740*z**10 + 168704255761757*z**11 +  \
        166697674473143*z**12 + 153149200385782*z**13 + 130905013456632*z**14 +  \
        103839072483680*z**15 + 76340601989177*z**16 + 51930718332178*z**17 +  \
        32542109090847*z**18 + 18679670569622*z**19 + 9767052208581*z**20 +  \
        4607272570048*z**21 + 1933954905536*z**22 + 709823828966*z**23 +  \
        221315523527*z**24 + 55974477625*z**25 + 10531061860*z**26 +  \
        1112580242*z**27))/(20736*(5*z - 5*z**5)**10*(1 + 9*z + 45*z**2 + 165*z**3 +  \
        486*z**4 + 1206*z**5 + 2598*z**6 + 4950*z**7 + 8451*z**8 + 13051*z**9 +  \
        18351*z**10 + 23607*z**11 + 27876*z**12 + 30276*z**13 + 30276*z**14 +  \
        27876*z**15 + 23607*z**16 + 18351*z**17 + 13051*z**18 + 8451*z**19 +  \
        4950*z**20 + 2598*z**21 + 1206*z**22 + 486*z**23 + 165*z**24 + 45*z**25 +  \
        9*z**26 + z**27)))
